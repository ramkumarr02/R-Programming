{
x = x^2
}
squareroot(4)
squareroot(4)
squareroot(4)
squareroot = function(x)
{
x = x^2
x
}
squareroot(4)
squareroot = function(x)
{
x = x^2
}
squareroot(4)
x
squareroot = function(x)
{
x = x^2
}
x = squareroot(4)
x
plot(lmodel1)
par(mfrow = c(2,2))
plot(lmodel1)
library(MASS)
library(ggplot2)
head(Boston)
fix(Boston)
#pairs(Boston, upper.panel = NULL)
rownum = seq(1, nrow(Boston),1)
set.seed(1234)
train_rows = sample(rownum, 0.7*nrow(Boston))
Train = Boston[train_rows,]
Test = Boston[-train_rows,]
nrow(Train)
nrow(Test)
nrow(Train) + nrow(Test)
plot(Boston$medv, Boston$lstat)
lmodel1 = lm(medv~lstat, data = Train)
summary(lmodel1)
names(lmodel1)
lmodel1$coefficients
Train_Residuals = lmodel1$residuals
MAPE = mean(abs(Train_Residuals/Train$medv))
MAPE
coef(lmodel1)
plot(Train$medv~Train$lstat)
abline(lmodel1, lwd =2, col = "red", lty = 2)
ggplot(data = Train, aes(x = medv, y = lstat)) +
geom_point() +
stat_smooth(method = "lmodel1")
Test$results = predict(lmodel1, Test)
head(Test)
Test$Error = Test$medv - Test$results
MAPE = mean(abs(Test$Error/Test$medv))
MAPE
# lmodel1 = lm(data = Train, medv~.)
# summary(lmodel1)
#
# lmodel1 = lm(data = Train, medv~. -age)
# summary(lmodel1)
#
# lmodel1 = lm(data = Train, medv~. -age -indus -crim)
# summary(lmodel1)
lmodel1 = lm(data = Train, medv~. -age -indus)
summary(lmodel1)
lmodel1 = lm(data = Train, medv~. +lstat*age -indus)
summary(lmodel1)
plot(lmodel1$residuals)
lmodel1$residuals
par(mfrow = c(2,2))
plot(lmodel1)
plot(lmodel1)
names(lmodel1)
hist(lmodel1$residuals)
par(mfrow = c(1,1))
hist(lmodel1$residuals)
?curve
hist(lmodel1$residuals)
abline(v = mean(lmodel1$residuals))
abline(h = mean(lmodel1$residuals))
mean(lmodel1$residuals
abline(h = ))
mean(lmodel1$residuals)
abline(v = 10)
abline(v = mean(lmodel1$residuals))
hist(lmodel1$residuals)
abline(v = mean(lmodel1$residuals), col = 'red', lwd = 2)
curve(dnorm(x, mean = mean(lmodel1$residuals), sd = sd(lmodel1$residuals), add =TRUE)
curve(dnorm(x, mean = mean(lmodel1$residuals), sd = sd(lmodel1$residuals), add =TRUE)
)
curve(dnorm(x, mean = mean(lmodel1$residuals), +
sd = sd(lmodel1$residuals), add =TRUE)
curve(dnorm(x, mean=mean(lmodel1$residuals), sd=sd(lmodel1$residuals), add =TRUE)
m = mean(lmodel1$residuals)
s = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(1,1))
hist(lmodel1$residuals)
m = mean(lmodel1$residuals)
s = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
m
s
par(mfrow = c(1,1))
hist(lmodel1$residuals)
m = mean(studres(lmodel1$residuals))
s = sd(studres(lmodel1$residuals))
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(1,1))
hist(lmodel1$residuals)
m = mean(studres(lmodel1))
s = sd(studres(lmodel1))
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(1,1))
hist(studres(lmodel1)
m = mean(studres(lmodel1))
s = sd(studres(lmodel1))
curve(dnorm(x, mean=m, sd=s), add =TRUE)
stuRes = studres(lmodel1)
stuRes = studres(lmodel1)
par(mfrow = c(1,1))
hist(stuRes)
stuRes = studres(lmodel1)
par(mfrow = c(1,1))
hist(stuRes, probability = TRUE)
stuRes = studres(lmodel1)
par(mfrow = c(1,1))
hist(stuRes)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(1,1))
hist(lmodel1)
par(mfrow = c(1,1))
hist(lmodel1)
hist(lmodel1)
par(mfrow = c(1,1))
hist(lmodel1$residuals)
hist(lmodel1$residuals, probability = TRUE)
par(mfrow = c(1,1))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean = m, sd = s), add = TRUE
curve(dnorm(x, mean=m, sd=s), add = TRUE)
par(mfrow = c(1,2))
hist(stuRes)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(2,1))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
par(mfrow = c(2,2))
hist(stuRes)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
stuRes = studres(lmodel1)
par(mfrow = c(2,2))
hist(stuRes)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
#par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
stuRes = studres(lmodel1)
par(mfrow = c(2,2))
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
#par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
library(car)
install.packages(car)
library()
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip')
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip')
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip',repos = NULL)
?repos
library(car)
update.packages(ask = FALSE, repos = "https://cloud.r-project.org")
update.packages(ask = FALSE, repos = "https://cloud.r-project.org")
library(car)
install.packages(pkbrtest)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/pbkrtest_0.4-7.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/lme4_1.1-14.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/minqa_1.2.4.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/nloptr_1.0.4.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/quantreg_5.34.zip',repos = NULL)
library(car)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/SparseM_1.77.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/MatrixModels_0.4-1.zip',repos = NULL)
library(car)
library(car)
?ncvTest
?ncvTest
ncvTest(lmodel1)
lmodel1
vif(lmodel1)
library(car)
install.packages(Rcpp)
available.packages()
available.packages()[,1]
installed.packages()
installed.packages()[,1]
install.packages(Rcpp)
install.packages("Rcpp")
library(car)
library(Rcpp)
?ncvTest
library(MASS)
library(ggplot2)
head(Boston)
fix(Boston)
#pairs(Boston, upper.panel = NULL)
rownum = seq(1, nrow(Boston),1)
set.seed(1234)
train_rows = sample(rownum, 0.7*nrow(Boston))
Train = Boston[train_rows,]
Test = Boston[-train_rows,]
nrow(Train)
nrow(Test)
nrow(Train) + nrow(Test)
plot(Boston$medv, Boston$lstat)
lmodel1 = lm(medv~lstat, data = Train)
summary(lmodel1)
names(lmodel1)
lmodel1$coefficients
Train_Residuals = lmodel1$residuals
MAPE = mean(abs(Train_Residuals/Train$medv))
MAPE
coef(lmodel1)
plot(Train$medv~Train$lstat)
abline(lmodel1, lwd =2, col = "red", lty = 2)
ggplot(data = Train, aes(x = medv, y = lstat)) +
geom_point() +
stat_smooth(method = "lmodel1")
Test$results = predict(lmodel1, Test)
head(Test)
Test$Error = Test$medv - Test$results
MAPE = mean(abs(Test$Error/Test$medv))
MAPE
# lmodel1 = lm(data = Train, medv~.)
# summary(lmodel1)
#
# lmodel1 = lm(data = Train, medv~. -age)
# summary(lmodel1)
#
# lmodel1 = lm(data = Train, medv~. -age -indus -crim)
# summary(lmodel1)
lmodel1 = lm(data = Train, medv~. -age -indus)
summary(lmodel1)
lmodel1 = lm(data = Train, medv~. +lstat*age -indus)
summary(lmodel1)
plot(lmodel1$residuals)
lmodel1$residuals
par(mfrow = c(2,2))
plot(lmodel1)
names(lmodel1)
par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
stuRes = studres(lmodel1)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
# update.packages(ask = FALSE, repos = "https://cloud.r-project.org")
#
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/pbkrtest_0.4-7.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/lme4_1.1-14.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/minqa_1.2.4.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/nloptr_1.0.4.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/quantreg_5.34.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/SparseM_1.77.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/MatrixModels_0.4-1.zip',repos = NULL)
#
# available.packages()[,1]
library(car)
ncvTest(lmodel1)
library(MASS)
library(ggplot2)
head(Boston)
fix(Boston)
#pairs(Boston, upper.panel = NULL)
rownum = seq(1, nrow(Boston),1)
set.seed(1234)
train_rows = sample(rownum, 0.7*nrow(Boston))
Train = Boston[train_rows,]
Test = Boston[-train_rows,]
nrow(Train)
nrow(Test)
nrow(Train) + nrow(Test)
plot(Boston$medv, Boston$lstat)
lmodel1 = lm(medv~lstat, data = Train)
summary(lmodel1)
installed.packages("zoo")
rm(list = ls())
setwd("F:/Ram/Data Science/GitHub/Learning-DataScience/R/Edx - The Analytics Edge/Flu Dynamics")
flutrain = read.csv("FluTrain.csv")
head(flutrain)
View(flutrain)
attach(flutrain)
Week[which.max(ILI)]
Week[which.max(Queries)]
hist(ILI)
boxplot(ILI)
lILI = log(ILI)
plot(lILI ~ Queries)
lmodel1 = lm(log(ILI)~ Queries, data = flutrain)
summary(lmodel1)
cor(ILI,Queries)
c = cor(log(ILI),Queries)
exp(-0.5*c)
log(1/c)
c^2
flutest = read.csv("FluTest.csv")
predtest = exp(predict(lmodel1, newdata = flutest))
View(flutest)
n = which(flutest$Week == "2012-03-11 - 2012-03-17")
p = predtest[n]
o = flutest[n,2]
relative_error = (o - p)/o
E = predtest - flutest$ILI
SE = E^2
MSE = mean(SE)
RMSE = sqrt(MSE)
install.packages("zoo")
library(zoo)
ililag2 = lag(zoo(flutrain$ILI),-2,na.pad = TRUE)
ililag2
coredata(ililag2)
ililag2
ililag2
coredata(ililag2)
Flutrain$ILIlag2 = coredata(ililag2)
flutrain$ILIlag2 = coredata(ililag2)
View(flutrain)
plot(log(ILIlag2) ~ log(ILI))
attach(flutrain)
plot(log(ILIlag2) ~ log(ILI))
lmodel2 = lm(ILI ~ . -Week, data = flutrain)
summary(lmodel2)
lmodel2 = lm(log(ILI) ~ Queries + log(ILIlag2), data = flutrain)
summary(lmodel2)
attach(flutest)
flutest$ILIlag2 = coredata(lag(zoo(flutest$ILI,-2,na.pad = TRUE)))
zoo(flutest$ILI,-2,na.pad = TRUE)
flutest$ILI
zoo(flutest$ILI)
flutest$ILIlag2 = coredata(lag(zoo(flutest$ILI),-2,na.pad = TRUE))
flutest
summary(flutest)
View(flutrain)
View(flutest)
nrow(flutrain)
nrow(flutrain)-2
flutrain$ILI[nrow(flutrain)-2]
flutest$ILIlag2[1]
flutest$ILIlag2[1] = flutrain$ILI[nrow(flutrain)-1]
flutest$ILIlag2[1]
flutest$ILIlag2[2] = flutrain$ILI[nrow(flutrain)]
View(flutrain)
View(flutest)
attach(flutest)
lmodel3 = lm(log(ILI) ~ Queries + log(ILIlag2),data = flutest)
summary(lmodel3)
rm(list = ls())
setwd("F:/Ram/Data Science/GitHub/Learning-DataScience/R/Edx - The Analytics Edge/Flu Dynamics")
flutrain = read.csv("FluTrain.csv")
head(flutrain)
View(flutrain)
attach(flutrain)
Week[which.max(ILI)]
Week[which.max(Queries)]
hist(ILI)
boxplot(ILI)
lILI = log(ILI)
plot(lILI ~ Queries)
lmodel1 = lm(log(ILI)~ Queries, data = flutrain)
summary(lmodel1)
cor(ILI,Queries)
c = cor(log(ILI),Queries)
exp(-0.5*c)
log(1/c)
c^2
flutest = read.csv("FluTest.csv")
predtest = exp(predict(lmodel1, newdata = flutest))
View(flutest)
n = which(flutest$Week == "2012-03-11 - 2012-03-17")
p = predtest[n]
o = flutest[n,2]
relative_error = (o - p)/o
E = predtest - flutest$ILI
SE = E^2
MSE = mean(SE)
RMSE = sqrt(MSE)
install.packages("zoo")
library(zoo)
ililag2 = lag(zoo(flutrain$ILI),-2,na.pad = TRUE)
flutrain$ILIlag2 = coredata(ililag2)
View(flutrain)
attach(flutrain)
plot(log(ILIlag2) ~ log(ILI))
lmodel2 = lm(log(ILI) ~ Queries + log(ILIlag2), data = flutrain)
summary(lmodel2)
# Creating a timelag for test data
attach(flutest)
flutest$ILIlag2 = coredata(lag(zoo(flutest$ILI),-2,na.pad = TRUE))
summary(flutest)
View(flutrain)
View(flutest)
flutest$ILIlag2[1] = flutrain$ILI[nrow(flutrain)-1]
flutest$ILIlag2[2] = flutrain$ILI[nrow(flutrain)]
install.packages("zoo")
rm(list = ls())
setwd("F:/Ram/Data Science/GitHub/Learning-DataScience/R/Edx - The Analytics Edge/Flu Dynamics")
flutrain = read.csv("FluTrain.csv")
head(flutrain)
View(flutrain)
attach(flutrain)
Week[which.max(ILI)]
Week[which.max(Queries)]
hist(ILI)
boxplot(ILI)
lILI = log(ILI)
plot(lILI ~ Queries)
lmodel1 = lm(log(ILI)~ Queries, data = flutrain)
summary(lmodel1)
cor(ILI,Queries)
c = cor(log(ILI),Queries)
exp(-0.5*c)
log(1/c)
c^2
flutest = read.csv("FluTest.csv")
predtest = exp(predict(lmodel1, newdata = flutest))
View(flutest)
n = which(flutest$Week == "2012-03-11 - 2012-03-17")
p = predtest[n]
o = flutest[n,2]
relative_error = (o - p)/o
E = predtest - flutest$ILI
SE = E^2
MSE = mean(SE)
RMSE = sqrt(MSE)
# install.packages("zoo")
#
# library(zoo)
ililag2 = lag(zoo(flutrain$ILI),-2,na.pad = TRUE)
flutrain$ILIlag2 = coredata(ililag2)
View(flutrain)
attach(flutrain)
plot(log(ILIlag2) ~ log(ILI))
lmodel2 = lm(log(ILI) ~ Queries + log(ILIlag2), data = flutrain)
summary(lmodel2)
# Creating a timelag for test data
attach(flutest)
flutest$ILIlag2 = coredata(lag(zoo(flutest$ILI),-2,na.pad = TRUE))
summary(flutest)
View(flutrain)
View(flutest)
flutest$ILIlag2[1] = flutrain$ILI[nrow(flutrain)-1]
flutest$ILIlag2[2] = flutrain$ILI[nrow(flutrain)]
predILI = exp(predict(lmodel2, newdata = flutest))
predILI
SE = predILI - flutest$ILI
SSE = SE^2
SSE = sum(SE)
E = predILI - flutest$ILI
SE = SE^2
SSE = sum(SE)
MSE = mean(SE)
RMSE = sqrt(MSE)
RMSE
E = predtest - flutest$ILI
SE = E^2
MSE = mean(SE)
RMSE = sqrt(MSE)
RMSE
