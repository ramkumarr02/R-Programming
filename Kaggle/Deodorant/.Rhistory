s(c(5,8,12))
sd(c(5,8,12))
min(c(4,1,6))
which.min(c(4,1,6))
c(4,1,6))
c(4,1,6)
Sys.setlocale("LC_ALL","C")
2^3
clear
cls
cl
x = sqrt(4)
x
del x
x
del(x)
for (i in 1:10){cat(print(i),"\n")}
for (i in 1:10){cat(print(i),"\n")}
for (i in 1:10){print(i)"\n"}
for (i in 1:10){cat(print(i),"\n")}
i
i = 0
for (i in 1:10){cat(print(i),"\n")}
i = 0
for (i in 1:10){cat(print(i),"\n")}
for (i in 1:10){cat("Number", print(i),"\n")}
for (i in 1:10){cat("Number", i,"\n")}
for (i in 1:10){cat("Number",i,"\n")}
?while
?while
?while
?while()
?While()
?while
()
?while()
i = 0
while(i < 10)
{
print(i)
i = i + 1
}
squareroot = function(x)
{
x = x^2
}
squareroot(4)
squareroot(4)
squareroot(4)
squareroot = function(x)
{
x = x^2
x
}
squareroot(4)
squareroot = function(x)
{
x = x^2
}
squareroot(4)
x
squareroot = function(x)
{
x = x^2
}
x = squareroot(4)
x
plot(lmodel1)
par(mfrow = c(2,2))
plot(lmodel1)
library(MASS)
library(ggplot2)
head(Boston)
fix(Boston)
#pairs(Boston, upper.panel = NULL)
rownum = seq(1, nrow(Boston),1)
set.seed(1234)
train_rows = sample(rownum, 0.7*nrow(Boston))
Train = Boston[train_rows,]
Test = Boston[-train_rows,]
nrow(Train)
nrow(Test)
nrow(Train) + nrow(Test)
plot(Boston$medv, Boston$lstat)
lmodel1 = lm(medv~lstat, data = Train)
summary(lmodel1)
names(lmodel1)
lmodel1$coefficients
Train_Residuals = lmodel1$residuals
MAPE = mean(abs(Train_Residuals/Train$medv))
MAPE
coef(lmodel1)
plot(Train$medv~Train$lstat)
abline(lmodel1, lwd =2, col = "red", lty = 2)
ggplot(data = Train, aes(x = medv, y = lstat)) +
geom_point() +
stat_smooth(method = "lmodel1")
Test$results = predict(lmodel1, Test)
head(Test)
Test$Error = Test$medv - Test$results
MAPE = mean(abs(Test$Error/Test$medv))
MAPE
# lmodel1 = lm(data = Train, medv~.)
# summary(lmodel1)
#
# lmodel1 = lm(data = Train, medv~. -age)
# summary(lmodel1)
#
# lmodel1 = lm(data = Train, medv~. -age -indus -crim)
# summary(lmodel1)
lmodel1 = lm(data = Train, medv~. -age -indus)
summary(lmodel1)
lmodel1 = lm(data = Train, medv~. +lstat*age -indus)
summary(lmodel1)
plot(lmodel1$residuals)
lmodel1$residuals
par(mfrow = c(2,2))
plot(lmodel1)
plot(lmodel1)
names(lmodel1)
hist(lmodel1$residuals)
par(mfrow = c(1,1))
hist(lmodel1$residuals)
?curve
hist(lmodel1$residuals)
abline(v = mean(lmodel1$residuals))
abline(h = mean(lmodel1$residuals))
mean(lmodel1$residuals
abline(h = ))
mean(lmodel1$residuals)
abline(v = 10)
abline(v = mean(lmodel1$residuals))
hist(lmodel1$residuals)
abline(v = mean(lmodel1$residuals), col = 'red', lwd = 2)
curve(dnorm(x, mean = mean(lmodel1$residuals), sd = sd(lmodel1$residuals), add =TRUE)
curve(dnorm(x, mean = mean(lmodel1$residuals), sd = sd(lmodel1$residuals), add =TRUE)
)
curve(dnorm(x, mean = mean(lmodel1$residuals), +
sd = sd(lmodel1$residuals), add =TRUE)
curve(dnorm(x, mean=mean(lmodel1$residuals), sd=sd(lmodel1$residuals), add =TRUE)
m = mean(lmodel1$residuals)
s = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(1,1))
hist(lmodel1$residuals)
m = mean(lmodel1$residuals)
s = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
m
s
par(mfrow = c(1,1))
hist(lmodel1$residuals)
m = mean(studres(lmodel1$residuals))
s = sd(studres(lmodel1$residuals))
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(1,1))
hist(lmodel1$residuals)
m = mean(studres(lmodel1))
s = sd(studres(lmodel1))
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(1,1))
hist(studres(lmodel1)
m = mean(studres(lmodel1))
s = sd(studres(lmodel1))
curve(dnorm(x, mean=m, sd=s), add =TRUE)
stuRes = studres(lmodel1)
stuRes = studres(lmodel1)
par(mfrow = c(1,1))
hist(stuRes)
stuRes = studres(lmodel1)
par(mfrow = c(1,1))
hist(stuRes, probability = TRUE)
stuRes = studres(lmodel1)
par(mfrow = c(1,1))
hist(stuRes)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(1,1))
hist(lmodel1)
par(mfrow = c(1,1))
hist(lmodel1)
hist(lmodel1)
par(mfrow = c(1,1))
hist(lmodel1$residuals)
hist(lmodel1$residuals, probability = TRUE)
par(mfrow = c(1,1))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean = m, sd = s), add = TRUE
curve(dnorm(x, mean=m, sd=s), add = TRUE)
par(mfrow = c(1,2))
hist(stuRes)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(2,1))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
par(mfrow = c(2,2))
hist(stuRes)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
stuRes = studres(lmodel1)
par(mfrow = c(2,2))
hist(stuRes)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
#par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
stuRes = studres(lmodel1)
par(mfrow = c(2,2))
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
#par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
library(car)
install.packages(car)
library()
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip')
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip')
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip',repos = NULL)
?repos
library(car)
update.packages(ask = FALSE, repos = "https://cloud.r-project.org")
update.packages(ask = FALSE, repos = "https://cloud.r-project.org")
library(car)
install.packages(pkbrtest)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/pbkrtest_0.4-7.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/lme4_1.1-14.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/minqa_1.2.4.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/nloptr_1.0.4.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/quantreg_5.34.zip',repos = NULL)
library(car)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/SparseM_1.77.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/MatrixModels_0.4-1.zip',repos = NULL)
library(car)
library(car)
?ncvTest
?ncvTest
ncvTest(lmodel1)
lmodel1
vif(lmodel1)
library(car)
install.packages(Rcpp)
available.packages()
available.packages()[,1]
installed.packages()
installed.packages()[,1]
install.packages(Rcpp)
install.packages("Rcpp")
library(car)
library(Rcpp)
?ncvTest
library(MASS)
library(ggplot2)
head(Boston)
fix(Boston)
#pairs(Boston, upper.panel = NULL)
rownum = seq(1, nrow(Boston),1)
set.seed(1234)
train_rows = sample(rownum, 0.7*nrow(Boston))
Train = Boston[train_rows,]
Test = Boston[-train_rows,]
nrow(Train)
nrow(Test)
nrow(Train) + nrow(Test)
plot(Boston$medv, Boston$lstat)
lmodel1 = lm(medv~lstat, data = Train)
summary(lmodel1)
names(lmodel1)
lmodel1$coefficients
Train_Residuals = lmodel1$residuals
MAPE = mean(abs(Train_Residuals/Train$medv))
MAPE
coef(lmodel1)
plot(Train$medv~Train$lstat)
abline(lmodel1, lwd =2, col = "red", lty = 2)
ggplot(data = Train, aes(x = medv, y = lstat)) +
geom_point() +
stat_smooth(method = "lmodel1")
Test$results = predict(lmodel1, Test)
head(Test)
Test$Error = Test$medv - Test$results
MAPE = mean(abs(Test$Error/Test$medv))
MAPE
# lmodel1 = lm(data = Train, medv~.)
# summary(lmodel1)
#
# lmodel1 = lm(data = Train, medv~. -age)
# summary(lmodel1)
#
# lmodel1 = lm(data = Train, medv~. -age -indus -crim)
# summary(lmodel1)
lmodel1 = lm(data = Train, medv~. -age -indus)
summary(lmodel1)
lmodel1 = lm(data = Train, medv~. +lstat*age -indus)
summary(lmodel1)
plot(lmodel1$residuals)
lmodel1$residuals
par(mfrow = c(2,2))
plot(lmodel1)
names(lmodel1)
par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
stuRes = studres(lmodel1)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
# update.packages(ask = FALSE, repos = "https://cloud.r-project.org")
#
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/pbkrtest_0.4-7.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/lme4_1.1-14.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/minqa_1.2.4.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/nloptr_1.0.4.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/quantreg_5.34.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/SparseM_1.77.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/MatrixModels_0.4-1.zip',repos = NULL)
#
# available.packages()[,1]
library(car)
ncvTest(lmodel1)
library(MASS)
library(ggplot2)
head(Boston)
fix(Boston)
#pairs(Boston, upper.panel = NULL)
rownum = seq(1, nrow(Boston),1)
set.seed(1234)
train_rows = sample(rownum, 0.7*nrow(Boston))
Train = Boston[train_rows,]
Test = Boston[-train_rows,]
nrow(Train)
nrow(Test)
nrow(Train) + nrow(Test)
plot(Boston$medv, Boston$lstat)
lmodel1 = lm(medv~lstat, data = Train)
summary(lmodel1)
setwd("F:/Ram/Data Science/GitHub/Data-Science/R Programming/Kaggle/Caret cross validation/Caret")
library(caret)
install.packages("caret")
library(caret)
setwd("F:/Ram/Data Science/GitHub/Data-Science/R Programming/Kaggle/Deodorant")
# Infra and Data Setup
###################################################################
setwd("F:/Ram/Data Science/GitHub/Data-Science/R Programming/Kaggle/Deodorant")
rm(list=ls(all=TRUE))
library(caret)
library(arm)
install.packages("arm")
library(arm)
data_train = read.csv("Data_train_reduced.csv", header = TRUE, sep=",")
data_test = read.csv("test_data.csv", header = TRUE, sep=",")
# data_train = read.table("../input/Data_train_reduced.csv", header = TRUE, sep=",")
# data_test = read.table("../input/test_data.csv", header = TRUE, sep=",")
summary(data_train)
# Removing some of the unnecessary text fields in train and test data
###################################################################
data_train$Product.ID = NULL
data_train$Respondent.ID = NULL
data_train$s7.involved.in.the.selection.of.the.cosmetic.products = NULL
data_train$q8.3 = NULL
data_train$q8.4 = NULL
data_train$q8.14 = NULL
data_train$q8.15 = NULL
data_train$q8.16 = NULL
data_train$q8.2 = NULL
data_train$q8.7 = NULL
data_train$q8.8 = NULL
data_train$q8.9 = NULL
data_train$q8.10 = NULL
data_train$q8.12 = NULL
data_train$q8.17 = NULL
data_train$q8.18 = NULL
data_train$q8.20 = NULL
str(data_train)
summary(data_train)
indexes <- sample(1:nrow(data_train), size = 0.7*nrow(data_train))
train <- data_train[indexes,]
test <- data_train[-indexes,]
model_linear_1 = lm(Instant.Liking~.,data=train,na.action = na.exclude)
summary(model_linear_1)
model_steplin_1 = step(lm(Instant.Liking~.,data=train),direction="both")
summary(model_steplin_1)
predict_model_steplin_1 = predict(model_steplin_1, newdata = test)
predict_model_steplin_1 = ifelse(predict_model_steplin_1>0.5,1,0)
test$predicted = predict_model_steplin_1
confusionMatrix(test$Instant.Liking,predict_model_steplin_1)
# Prediction on steplin model with OOB partial Test Dataset
###################################################################
predict_model_steplin_1 = predict(model_steplin_1, newdata = test)
predict_model_steplin_1 = ifelse(predict_model_steplin_1>0.5,1,0)
test$predicted = predict_model_steplin_1
confusionMatrix(test$Instant.Liking,predict_model_steplin_1)
summary(test$Instant.Liking)
str(test$Instant.Liking)
str(predict_model_steplin_1)
confusionMatrix(test$Instant.Liking,test$predicted)
str(test$predicted)
confusionMatrix(as.factor(test$Instant.Liking),as.factor(test$predicted))
confusionMatrix(as.integer(test$Instant.Liking),as.integer(test$predicted))
view(test$predicted)
View(test$predicted)
summary(test$predicted)
str(test$predicted)
str(test$Instant.Liking)
predict_model_steplin_1 = ifelse(predict_model_steplin_1>0.5,1,0)
test$predicted = predict_model_steplin_1
str(test$predicted)
test$predicted = as.integer(test$predicted)
str(test$predicted)
str(test$Instant.Liking)
confusionMatrix(as.integer(test$Instant.Liking),as.integer(test$predicted))
write.csv(test,"sampletest.csv")
model_steplin_2 = step(lm(Instant.Liking~.,data = data_train),direction="both")
summary(model_steplin_2)
predict_model_steplin_2 = predict(model_steplin_2, newdata =  data_test)
predict_model_steplin_2 = ifelse(predict_model_steplin_2 > 0.5, 1, 0)
steplin_result_2 = data.frame(data_test$Respondent.ID, data_test$Product, predict_model_steplin_2)
summary(steplin_result_2)
write.csv(steplin_result_2, "Steplin.csv")
# Train Data set
data_train$Instant.Liking = as.factor(data_train$Instant.Liking)
data_train$q11.time.of.day.would.this.Deodorant.be.appropriate = as.factor(data_train$q11.time.of.day.would.this.Deodorant.be.appropriate)
data_train$q12.which.occasions.would.this.Deodorant.be.appropriate = as.factor(data_train$q12.which.occasions.would.this.Deodorant.be.appropriate)
data_train$q2_all.words = as.factor(data_train$q2_all.words)
data_train$q8.1 = as.factor(data_train$q8.1)
data_train$q8.11 = as.factor(data_train$q8.11)
data_train$q8.13 = as.factor(data_train$q8.13)
data_train$q8.19 = as.factor(data_train$q8.19)
data_train$q8.5 = as.factor(data_train$q8.5)
data_train$q8.6 = as.factor(data_train$q8.6)
data_train$s11.marital.status = as.factor(data_train$s11.marital.status)
data_train$s12.working.status = as.factor(data_train$s12.working.status)
data_train$s13a.b.most.often = as.factor(data_train$s13a.b.most.often)
data_train$s8.ethnic.background = as.factor(data_train$s8.ethnic.background)
data_train$ValSegb = as.factor(data_train$ValSegb)
# Test Data Set
data_test$q11.time.of.day.would.this.Deodorant.be.appropriate = as.factor(data_test$q11.time.of.day.would.this.Deodorant.be.appropriate)
data_test$q12.which.occasions.would.this.Deodorant.be.appropriate = as.factor(data_test$q12.which.occasions.would.this.Deodorant.be.appropriate)
data_test$q2_all.words = as.factor(data_test$q2_all.words)
data_test$q8.1 = as.factor(data_test$q8.1)
data_test$q8.11 = as.factor(data_test$q8.11)
data_test$q8.13 = as.factor(data_test$q8.13)
data_test$q8.19 = as.factor(data_test$q8.19)
data_test$q8.5 = as.factor(data_test$q8.5)
data_test$q8.6 = as.factor(data_test$q8.6)
data_test$s11.marital.status = as.factor(data_test$s11.marital.status)
data_test$s12.working.status = as.factor(data_test$s12.working.status)
data_test$s13a.b.most.often = as.factor(data_test$s13a.b.most.often)
data_test$s8.ethnic.background = as.factor(data_test$s8.ethnic.background)
data_test$ValSegb = as.factor(data_test$ValSegb)
model_log_1 = glm(Instant.Liking~.,data=data_train,family = binomial(), control = list(maxit = 50))
summary(model_log_1)
predict_model_log_1 = predict(model_log_1, newdata =  data_test)
predict_model_log_1= ifelse(predict_model_log_1> 0.5, 1, 0)
log_result_1 = data.frame(data_test$Respondent.ID, data_test$Product, predict_model_log_1)
summary(log_result_1)
write.csv(log_result_1, "log.csv")
rm(list=ls())
library(caret)
library(datasets)
data(mtcars)
