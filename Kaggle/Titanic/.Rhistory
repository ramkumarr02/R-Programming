par(mfrow = c(2,2))
hist(stuRes)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
stuRes = studres(lmodel1)
par(mfrow = c(2,2))
hist(stuRes)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
#par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
stuRes = studres(lmodel1)
par(mfrow = c(2,2))
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
#par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
library(car)
install.packages(car)
library()
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip')
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip')
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip',repos = NULL)
?repos
library(car)
update.packages(ask = FALSE, repos = "https://cloud.r-project.org")
update.packages(ask = FALSE, repos = "https://cloud.r-project.org")
library(car)
install.packages(pkbrtest)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/pbkrtest_0.4-7.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/lme4_1.1-14.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/minqa_1.2.4.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/nloptr_1.0.4.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/quantreg_5.34.zip',repos = NULL)
library(car)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/SparseM_1.77.zip',repos = NULL)
library(car)
install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/MatrixModels_0.4-1.zip',repos = NULL)
library(car)
library(car)
?ncvTest
?ncvTest
ncvTest(lmodel1)
lmodel1
vif(lmodel1)
library(car)
install.packages(Rcpp)
available.packages()
available.packages()[,1]
installed.packages()
installed.packages()[,1]
install.packages(Rcpp)
install.packages("Rcpp")
library(car)
library(Rcpp)
?ncvTest
library(MASS)
library(ggplot2)
head(Boston)
fix(Boston)
#pairs(Boston, upper.panel = NULL)
rownum = seq(1, nrow(Boston),1)
set.seed(1234)
train_rows = sample(rownum, 0.7*nrow(Boston))
Train = Boston[train_rows,]
Test = Boston[-train_rows,]
nrow(Train)
nrow(Test)
nrow(Train) + nrow(Test)
plot(Boston$medv, Boston$lstat)
lmodel1 = lm(medv~lstat, data = Train)
summary(lmodel1)
names(lmodel1)
lmodel1$coefficients
Train_Residuals = lmodel1$residuals
MAPE = mean(abs(Train_Residuals/Train$medv))
MAPE
coef(lmodel1)
plot(Train$medv~Train$lstat)
abline(lmodel1, lwd =2, col = "red", lty = 2)
ggplot(data = Train, aes(x = medv, y = lstat)) +
geom_point() +
stat_smooth(method = "lmodel1")
Test$results = predict(lmodel1, Test)
head(Test)
Test$Error = Test$medv - Test$results
MAPE = mean(abs(Test$Error/Test$medv))
MAPE
# lmodel1 = lm(data = Train, medv~.)
# summary(lmodel1)
#
# lmodel1 = lm(data = Train, medv~. -age)
# summary(lmodel1)
#
# lmodel1 = lm(data = Train, medv~. -age -indus -crim)
# summary(lmodel1)
lmodel1 = lm(data = Train, medv~. -age -indus)
summary(lmodel1)
lmodel1 = lm(data = Train, medv~. +lstat*age -indus)
summary(lmodel1)
plot(lmodel1$residuals)
lmodel1$residuals
par(mfrow = c(2,2))
plot(lmodel1)
names(lmodel1)
par(mfrow = c(2,2))
hist(lmodel1$residuals, probability = TRUE)
m = mean(lmodel1$residuals)
sd = sd(lmodel1$residuals)
curve(dnorm(x, mean=m, sd=s), add = TRUE)
stuRes = studres(lmodel1)
hist(stuRes, probability = TRUE)
m = mean(stuRes)
s = sd(stuRes)
curve(dnorm(x, mean=m, sd=s), add =TRUE)
# update.packages(ask = FALSE, repos = "https://cloud.r-project.org")
#
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/car_2.1-6.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/pbkrtest_0.4-7.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/lme4_1.1-14.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/minqa_1.2.4.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/nloptr_1.0.4.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/quantreg_5.34.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/SparseM_1.77.zip',repos = NULL)
# install.packages('https://cran.r-project.org/bin/windows/contrib/3.5/MatrixModels_0.4-1.zip',repos = NULL)
#
# available.packages()[,1]
library(car)
ncvTest(lmodel1)
library(MASS)
library(ggplot2)
head(Boston)
fix(Boston)
#pairs(Boston, upper.panel = NULL)
rownum = seq(1, nrow(Boston),1)
set.seed(1234)
train_rows = sample(rownum, 0.7*nrow(Boston))
Train = Boston[train_rows,]
Test = Boston[-train_rows,]
nrow(Train)
nrow(Test)
nrow(Train) + nrow(Test)
plot(Boston$medv, Boston$lstat)
lmodel1 = lm(medv~lstat, data = Train)
summary(lmodel1)
# Infra and Data Setup
###################################################################
rm(list=ls())
# data_train = read.csv("../input/train.csv")
# data_test = read.csv("../input/test.csv")
setwd("F:/Ram/Data Science/GitHub/Data-Science/R Programming/Kaggle/Titanic")
data_train = read.csv("train1.csv")
data_test = read.csv("test1.csv")
library(caret)
# PreProcessing
###################################################################
summary(data_train)
str(data_train)
temp_train_PassengerId = data_train$PassengerId
data_train$PassengerId = NULL
data_train$Name = NULL
data_train$Ticket = NULL
data_train$Cabin = NULL
#Test Data set
temp_test_PassengerId = data_test$PassengerId
data_test$PassengerId = NULL
data_test$Name = NULL
data_test$Ticket = NULL
data_test$Cabin = NULL
#Impute Center and Scale
model_impute = preProcess(data_train, method = c("knnImpute", "center", "scale"))
install.packages("RANN")
library(RANN)
data_train_pp = predict(model_impute, newdata = data_train)
summary(data_train_pp)
# PreProcessing
###################################################################
summary(data_train)
sum(is.na(data_train))
sum(is.na(data_train_pp))
summary(data_train_pp)
str(data_train_pp)
str(data_train)
data_train_survived = as.factor(data_train_survived)
# Infra and Data Setup
###################################################################
rm(list=ls())
# data_train = read.csv("../input/train.csv")
# data_test = read.csv("../input/test.csv")
setwd("F:/Ram/Data Science/GitHub/Data-Science/R Programming/Kaggle/Titanic")
data_train = read.csv("train1.csv")
data_test = read.csv("test1.csv")
library(caret)
# PreProcessing
###################################################################
summary(data_train)
str(data_train)
# Removing Unnecessary variables
#Training Data set
temp_train_PassengerId = data_train$PassengerId
data_train_survived = as.factor(data_train$survived)
data_train$PassengerId = NULL
data_train$Name = NULL
data_train$Ticket = NULL
data_train$Cabin = NULL
#Test Data set
temp_test_PassengerId = data_test$PassengerId
data_test$PassengerId = NULL
data_test$Name = NULL
data_test$Ticket = NULL
data_test$Cabin = NULL
#Impute Center and Scale
model_impute = preProcess(data_train, method = c("knnImpute", "center", "scale"))
#     install.packages("RANN")
library(RANN)
data_train_pp = predict(model_impute, newdata = data_train)
sum(is.na(data_train))
sum(is.na(data_train_pp))
summary(data_train_pp)
str(data_train_pp)
# Infra and Data Setup
###################################################################
rm(list=ls())
# data_train = read.csv("../input/train.csv")
# data_test = read.csv("../input/test.csv")
setwd("F:/Ram/Data Science/GitHub/Data-Science/R Programming/Kaggle/Titanic")
data_train = read.csv("train1.csv")
data_test = read.csv("test1.csv")
library(caret)
# PreProcessing
###################################################################
summary(data_train)
str(data_train)
# Removing Unnecessary variables
#Training Data set
temp_train_PassengerId = data_train$PassengerId
data_train$survived = as.factor(data_train$survived)
data_train$PassengerId = NULL
data_train$Name = NULL
data_train$Ticket = NULL
data_train$Cabin = NULL
#Test Data set
temp_test_PassengerId = data_test$PassengerId
data_test$PassengerId = NULL
data_test$Name = NULL
data_test$Ticket = NULL
data_test$Cabin = NULL
#Impute Center and Scale
model_impute = preProcess(data_train, method = c("knnImpute", "center", "scale"))
#     install.packages("RANN")
library(RANN)
data_train_pp = predict(model_impute, newdata = data_train)
sum(is.na(data_train))
sum(is.na(data_train_pp))
summary(data_train_pp)
str(data_train_pp)
str(data_train)
# Infra and Data Setup
###################################################################
rm(list=ls())
# data_train = read.csv("../input/train.csv")
# data_test = read.csv("../input/test.csv")
setwd("F:/Ram/Data Science/GitHub/Data-Science/R Programming/Kaggle/Titanic")
data_train = read.csv("train1.csv")
data_test = read.csv("test1.csv")
library(caret)
# PreProcessing
###################################################################
summary(data_train)
str(data_train)
# Removing Unnecessary variables
#Training Data set
temp_train_PassengerId = data_train$PassengerId
data_train$Survived = as.factor(data_train$Survived)
data_train$PassengerId = NULL
data_train$Name = NULL
data_train$Ticket = NULL
data_train$Cabin = NULL
#Test Data set
temp_test_PassengerId = data_test$PassengerId
data_test$PassengerId = NULL
data_test$Name = NULL
data_test$Ticket = NULL
data_test$Cabin = NULL
#Impute Center and Scale
model_impute = preProcess(data_train, method = c("knnImpute", "center", "scale"))
#     install.packages("RANN")
library(RANN)
data_train_pp = predict(model_impute, newdata = data_train)
sum(is.na(data_train))
sum(is.na(data_train_pp))
summary(data_train_pp)
str(data_train_pp)
str(data_train)
# Infra and Data Setup
###################################################################
rm(list=ls())
# data_train = read.csv("../input/train.csv")
# data_test = read.csv("../input/test.csv")
setwd("F:/Ram/Data Science/GitHub/Data-Science/R Programming/Kaggle/Titanic")
data_train = read.csv("train1.csv")
data_test = read.csv("test1.csv")
library(caret)
# PreProcessing
###################################################################
summary(data_train)
str(data_train)
# Removing Unnecessary variables
#Training Data set
temp_train_PassengerId = data_train$PassengerId
data_train$Survived = as.factor(data_train$Survived)
data_train$Pclass = as.factor(data_train$Pclass)
data_train$PassengerId = NULL
data_train$Name = NULL
data_train$Ticket = NULL
data_train$Cabin = NULL
#Test Data set
temp_test_PassengerId = data_test$PassengerId
data_test$Survived = as.factor(data_test$Survived)
data_test$Pclass = as.factor(data_test$Pclass)
data_test$PassengerId = NULL
data_test$Name = NULL
data_test$Ticket = NULL
data_test$Cabin = NULL
#Impute Center and Scale
model_impute = preProcess(data_train, method = c("knnImpute", "center", "scale"))
#     install.packages("RANN")
library(RANN)
data_train_pp = predict(model_impute, newdata = data_train)
sum(is.na(data_train))
sum(is.na(data_train_pp))
summary(data_train_pp)
str(data_train)
str(data_train_pp)
index = createDataPartition(data_train_pp$Survived, p - 0.8, list = FALSE)
index = createDataPartition(data_train_pp$Survived, p = 0.8, list = FALSE)
data_train_pp_train = data_train_pp[index,]
str(data_train_pp_train)
data_train_pp_train = data_train_pp[-index,]
data_train_pp_train = data_train_pp[index,]
data_train_pp_test = data_train_pp[-index,]
str(data_train_pp_train)
str(data_train_pp_test)
# Feature Selection
###################################################################
predictors = names(data_train_pp_train)
predictors
# Feature Selection
###################################################################
output = "Survived"
# Infra and Data Setup
###################################################################
rm(list=ls())
# data_train = read.csv("../input/train.csv")
# data_test = read.csv("../input/test.csv")
setwd("F:/Ram/Data Science/GitHub/Data-Science/R Programming/Kaggle/Titanic")
data_train = read.csv("train1.csv")
data_test = read.csv("test1.csv")
library(caret)
# PreProcessing
###################################################################
summary(data_train)
str(data_train)
# Removing Unnecessary variables
#Training Data set
temp_train_PassengerId = data_train$PassengerId
data_train$Survived = as.factor(data_train$Survived)
data_train$Pclass = as.factor(data_train$Pclass)
data_train$PassengerId = NULL
data_train$Name = NULL
data_train$Ticket = NULL
data_train$Cabin = NULL
#Test Data set
temp_test_PassengerId = data_test$PassengerId
data_test$Survived = as.factor(data_test$Survived)
data_test$Pclass = as.factor(data_test$Pclass)
data_test$PassengerId = NULL
data_test$Name = NULL
data_test$Ticket = NULL
data_test$Cabin = NULL
#Impute Center and Scale
model_impute = preProcess(data_train, method = c("knnImpute", "center", "scale"))
#    install.packages("RANN")
library(RANN)
data_train_pp = predict(model_impute, newdata = data_train)
sum(is.na(data_train))
sum(is.na(data_train_pp))
summary(data_train_pp)
str(data_train)
str(data_train_pp)
# Split Data
###################################################################
index = createDataPartition(data_train_pp$Survived, p = 0.8, list = FALSE)
data_train_pp_train = data_train_pp[index,]
data_train_pp_test = data_train_pp[-index,]
str(data_train_pp_train)
str(data_train_pp_test)
# Feature Selection
###################################################################
outcome = "Survived"
predictors = names(data_train_pp_train)
predictors = names(data_train_pp_train)[!names(data_train_pp_train) %in% outcome]
predictors
control_fs = rfeControl(functions = rfFuncs, method = "repeatedCv", repeats = 5, verbose = FALSE)
control_fs
model_fs = rfe(data_train_pp_train[predictors], data_train_pp_train[outcome, rfeControl = control_fs)
model_fs = rfe(data_train_pp_train[predictors], data_train_pp_train[outcome], rfeControl = control_fs)
model_fs = rfe(data_train_pp_train[,predictors], data_train_pp_train[,outcome], rfeControl = control_fs)
library(e1071)
install.packages("e1071")
library(e1071)
model_fs = rfe(data_train_pp_train[,predictors], data_train_pp_train[,outcome], rfeControl = control_fs)
library(randomForest)
install.packages("randomForest")
library(randomForest)
model_fs = rfe(data_train_pp_train[,predictors], data_train_pp_train[,outcome], rfeControl = control_fs)
print("done")
print("model_fs")
print(model_fs)
# Train Model
###################################################################
model_rf = train(data_train_pp_train[,predictors], data_train_pp_train[,outcome],method = 'rf', tuneLength = 10)
print("done")
summary(model_rf)
print(model_rf)
# Variable Importance
###################################################################
varImp(model_rf)
# Prediction
###################################################################
prediction = predict.train(object = model_rf, newdata = data_train_pp_test, type = "prob")
prediction
nrow(prediction)
confusionMatrix(prediction,data_train_pp_test$Survived)
# Prediction
###################################################################
prediction = predict.train(object = model_rf, newdata = data_train_pp_test, type = "raw")
confusionMatrix(prediction,data_train_pp_test$Survived)
print(model_fs)
print(model_rf)
summary(model_rf)
print(model_fs)
predictors = c("Sex","Pclass","Fare","Age")
predictors = c("Sex","Pclass","Fare","Age")
model_rf = train(data_train_pp_train[,predictors], data_train_pp_train[,outcome],method = 'rf', tuneLength = 10)
summary(model_rf)
print(model_rf)
# Variable Importance
###################################################################
varImp(model_rf)
# Prediction
###################################################################
prediction = predict.train(object = model_rf, newdata = data_train_pp_test, type = "raw")
confusionMatrix(prediction,data_train_pp_test$Survived)
# Variable Importance
###################################################################
varImp(model_rf)
data_train_pp
#Impute Center and Scale
model_impute_test = preProcess(data_test, method = c("knnImpute", "center", "scale"))
#install.packages("RANN")
library(RANN)
data_test_pp = predict(model_impute_test, newdata = data_test)
sum(is.na(data_test))
sum(is.na(data_test_pp))
summary(data_test_pp)
str(data_test)
str(data_test_pp)
# Train Model with Full Data
###################################################################
model_rf_full = train(data_train_pp[,predictors], data_train_pp[,outcome],method = 'rf', tuneLength = 10)
summary(model_rf_full)
print(model_rf_full)
# Variable Importance
###################################################################
varImp(model_rf_full)
# Prediction
###################################################################
prediction = predict.train(object = model_rf_full, newdata = data_test_pp, type = "raw")
confusionMatrix(prediction,data_test_pp$Survived)
prediction
data_test_pp$Survived
output_file = data.frame(temp_test_PassengerId,prediction)
output_file
write.csv(output_file,"titanic_care.csv",row.names = FALSE)
write.csv(output_file,"titanic_caret.csv",row.names = FALSE)
PassengerID = temp_test_PassengerId
Survived = prediction
output_file = data.frame(PassengerID,Survived)
write.csv(output_file,"titanic_caret.csv",row.names = FALSE)
